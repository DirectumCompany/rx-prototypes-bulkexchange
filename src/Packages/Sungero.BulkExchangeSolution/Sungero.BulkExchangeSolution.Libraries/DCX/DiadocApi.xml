<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DiadocApi</name>
    </assembly>
    <members>
        <member name="T:Diadoc.Api.AggregateException">
            <summary>Represents one or more errors that occur during application execution.</summary> 
            <remarks>
            <see cref="T:Diadoc.Api.AggregateException"/> is used to consolidate multiple failures into a single, throwable
            exception object.
            </remarks> 
        </member>
        <member name="M:Diadoc.Api.AggregateException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Diadoc.Api.AggregateException"/> class. 
            </summary>
        </member>
        <member name="M:Diadoc.Api.AggregateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Diadoc.Api.AggregateException"/> class with 
            a specified error message.
            </summary> 
            <param name="message">The error message that explains the reason for the exception.</param> 
        </member>
        <member name="M:Diadoc.Api.AggregateException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Diadoc.Api.AggregateException"/> class with a specified error 
            message and a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param> 
            <param name="innerException">The exception that is the cause of the current exception.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="innerException"/> argument
            is null.</exception>
        </member>
        <member name="M:Diadoc.Api.AggregateException.#ctor(System.Collections.Generic.IEnumerable{System.Exception})">
            <summary> 
            Initializes a new instance of the <see cref="T:Diadoc.Api.AggregateException"/> class with 
            references to the inner exceptions that are the cause of this exception.
            </summary> 
            <param name="innerExceptions">The exceptions that are the cause of the current exception.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="innerExceptions"/> argument
            is null.</exception>
            <exception cref="T:System.ArgumentException">An element of <paramref name="innerExceptions"/> is 
            null.</exception>
        </member>
        <member name="M:Diadoc.Api.AggregateException.#ctor(System.Exception[])">
            <summary>
            Initializes a new instance of the <see cref="T:Diadoc.Api.AggregateException"/> class with
            references to the inner exceptions that are the cause of this exception. 
            </summary>
            <param name="innerExceptions">The exceptions that are the cause of the current exception.</param> 
            <exception cref="T:System.ArgumentNullException">The <paramref name="innerExceptions"/> argument 
            is null.</exception>
            <exception cref="T:System.ArgumentException">An element of <paramref name="innerExceptions"/> is 
            null.</exception>
        </member>
        <member name="M:Diadoc.Api.AggregateException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Exception})">
            <summary> 
            Initializes a new instance of the <see cref="T:Diadoc.Api.AggregateException"/> class with a specified error
            message and references to the inner exceptions that are the cause of this exception. 
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerExceptions">The exceptions that are the cause of the current exception.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="innerExceptions"/> argument 
            is null.</exception>
            <exception cref="T:System.ArgumentException">An element of <paramref name="innerExceptions"/> is 
            null.</exception> 
        </member>
        <member name="M:Diadoc.Api.AggregateException.#ctor(System.String,System.Exception[])">
            <summary> 
            Initializes a new instance of the <see cref="T:Diadoc.Api.AggregateException"/> class with a specified error
            message and references to the inner exceptions that are the cause of this exception. 
            </summary> 
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerExceptions">The exceptions that are the cause of the current exception.</param> 
            <exception cref="T:System.ArgumentNullException">The <paramref name="innerExceptions"/> argument
            is null.</exception>
            <exception cref="T:System.ArgumentException">An element of <paramref name="innerExceptions"/> is
            null.</exception> 
        </member>
        <member name="M:Diadoc.Api.AggregateException.#ctor(System.String,System.Collections.Generic.IList{System.Exception})">
            <summary>
            Allocates a new aggregate exception with the specified message and list of inner exceptions.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param> 
            <param name="innerExceptions">The exceptions that are the cause of the current exception.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="innerExceptions"/> argument 
            is null.</exception> 
            <exception cref="T:System.ArgumentException">An element of <paramref name="innerExceptions"/> is
            null.</exception> 
        </member>
        <member name="M:Diadoc.Api.AggregateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            Initializes a new instance of the <see cref="T:Diadoc.Api.AggregateException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds
            the serialized object data about the exception being thrown.</param> 
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that
            contains contextual information about the source or destination. </param> 
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> argument is null.</exception> 
            <exception cref="T:System.Runtime.Serialization.SerializationException">The exception could not be deserialized correctly.</exception>
        </member>
        <member name="M:Diadoc.Api.AggregateException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about
            the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds 
            the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that 
            contains contextual information about the source or destination. </param> 
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> argument is null.</exception>
        </member>
        <member name="M:Diadoc.Api.AggregateException.GetBaseException">
            <summary> 
            Returns the <see cref="T:Diadoc.Api.AggregateException"/> that is the root cause of this exception. 
            </summary>
        </member>
        <member name="M:Diadoc.Api.AggregateException.Handle(System.Func{System.Exception,System.Boolean})">
            <summary> 
            Invokes a handler on each <see cref="T:System.Exception"/> contained by this <see cref="T:Diadoc.Api.AggregateException"/>. 
            </summary>
            <param name="predicate">The predicate to execute for each exception. The predicate accepts as an
            argument the <see cref="T:System.Exception"/> to be processed and returns a Boolean to indicate
            whether the exception was handled.</param> 
            <remarks>
            Each invocation of the <paramref name="predicate"/> returns true or false to indicate whether the 
            <see cref="T:System.Exception"/> was handled. After all invocations, if any exceptions went 
            unhandled, all unhandled exceptions will be put into a new <see cref="T:Diadoc.Api.AggregateException"/>
            which will be thrown. Otherwise, the <see cref="M:Diadoc.Api.AggregateException.Handle(System.Func{System.Exception,System.Boolean})"/> method simply returns. If any 
            invocations of the <paramref name="predicate"/> throws an exception, it will halt the processing
            of any more exceptions and immediately propagate the thrown exception as-is.
            </remarks>
            <exception cref="T:Diadoc.Api.AggregateException">An exception contained by this <see cref="T:Diadoc.Api.AggregateException"/> was not handled.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate"/> argument is 
            null.</exception> 
        </member>
        <member name="M:Diadoc.Api.AggregateException.Flatten">
            <summary> 
            Flattens an <see cref="T:Diadoc.Api.AggregateException"/> instances into a single, new instance.
            </summary> 
            <returns>A new, flattened <see cref="T:Diadoc.Api.AggregateException"/>.</returns>
            <remarks>
            If any inner exceptions are themselves instances of
            <see cref="T:Diadoc.Api.AggregateException"/>, this method will recursively flatten all of them. The 
            inner exceptions returned in the new <see cref="T:Diadoc.Api.AggregateException"/>
            will be the union of all of the the inner exceptions from exception tree rooted at the provided 
            <see cref="T:Diadoc.Api.AggregateException"/> instance. 
            </remarks>
        </member>
        <member name="M:Diadoc.Api.AggregateException.ToString">
            <summary>
            Creates and returns a string representation of the current <see cref="T:Diadoc.Api.AggregateException"/>. 
            </summary>
            <returns>A string representation of the current exception.</returns>
        </member>
        <member name="P:Diadoc.Api.AggregateException.InnerExceptions">
            <summary> 
            Gets a read-only collection of the <see cref="T:System.Exception"/> instances that caused the 
            current exception.
            </summary> 
        </member>
        <member name="M:Diadoc.Api.Cryptography.WinApiCrypt.VerifySignature(System.Byte[],System.Byte[])">
            <summary>
            Проверка подписи
            </summary>
            <param name="content">Подписанные данные</param>
            <param name="signatures">Содержимое подписи</param>
            <returns>Список сертификатов из подписи</returns>
        </member>
        <member name="M:Diadoc.Api.Cryptography.WinApiCrypt.Sign(System.Byte[],System.Byte[])">
            <summary>
            Подписывание данных
            </summary>
            <param name="content">Содержимое</param>
            <param name="certificateContent">Содержимое сертификата</param>
            <returns>Подпись</returns>
        </member>
        <member name="P:Diadoc.Api.Http.HttpClient.UseSystemProxy">
            <summary>
            The default value is true
            </summary>
        </member>
        <member name="P:Diadoc.Api.Http.HttpClient.ClientCertificate">
            <summary>
            Client certificate used to establish https requests
            </summary>
        </member>
        <member name="P:Diadoc.Api.IDiadocApi.UsingSystemProxy">
            <summary>
            The default value is true
            </summary>
        </member>
        <member name="M:Diadoc.Api.Cryptography.Bytes.Compare(System.Byte[],System.Byte[])">
            <summary>
            Сравнение двух массивов байт
            </summary>
            <param name="d1"></param>
            <param name="d2"></param>
            <returns></returns>
        </member>
        <member name="M:Diadoc.Api.Cryptography.CertificateWithPrivateKeyFinder.GetCertificateWithPrivateKey(System.Byte[])">
            <summary>
            Поиск сертификата с закрытым ключом по содержимому
            </summary>
            <param name="certificateContent">Содержимое сертификата</param>
            <returns>Указатель на сертификат</returns>
        </member>
        <member name="M:Diadoc.Api.Cryptography.CertificateWithPrivateKeyFinder.GetDefaultStores">
            <summary>
            Получение списка хранилищ по-умлочанию
            </summary>
            <returns></returns>
        </member>
        <member name="M:Diadoc.Api.Cryptography.CertificateWithPrivateKeyFinder.HasPrivateKey(System.IntPtr)">
            <summary>
            Проверка на наличие закрытого ключа у сертификата
            </summary>
            <param name="certificate"></param>
            <returns></returns>
        </member>
        <member name="M:Diadoc.Api.Cryptography.CertificateWithPrivateKeyFinder.FindCertificateWithPrivateKey(System.IntPtr)">
            <summary>
            Поиск сертификата, совпрадающего с исходным в известных хранилищах
            </summary>
            <param name="initialCertificate">Исходный сертификат</param>
            <returns>Сертификат с закрытым ключом. IntPtr.Zero, если не найден</returns>
        </member>
        <member name="M:Diadoc.Api.Cryptography.CertificateWithPrivateKeyFinder.GetStoreHandle(System.Int32,System.String)">
            <summary>
            Получение указателя на хранилище сертификатов
            </summary>
            <param name="store"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Diadoc.Api.Cryptography.CertificateWithPrivateKeyFinder.GetCertificatesFromStore(System.IntPtr)">
            <summary>
            Возвращает список сертификатов из хранилища
            </summary>
            <param name="storeHandle"></param>
            <returns></returns>
        </member>
        <member name="M:Diadoc.Api.Cryptography.CertificateWithPrivateKeyFinder.GetHash(System.IntPtr)">
            <summary>
            Хэш для сертификата
            </summary>
            <param name="certificate"></param>
            <returns></returns>
        </member>
        <member name="P:Diadoc.Api.DiadocApi.UsingSystemProxy">
            <summary>
              The default value is true
            </summary>
        </member>
    </members>
</doc>
